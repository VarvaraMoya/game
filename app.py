import random #Импортируем модуль random, который позволяет генерировать случайные числа. Этот модуль будет использоваться для генерации загаданного числа.


def generate_number(): #определяем функцию generate_number(), которая генерирует четырехзначное число.
    """Генерирует четырехзначное число, в котором нет повторяющихся цифр."""
    digits = random.sample(range(10), 4) #random.sample(range(10), 4) выбирает 4 уникальные цифры из диапазона от 0 до 9.
    return ''.join(map(str, digits)) #map(str, digits) преобразует каждую цифру в строку.'.join(...) объединяет строки в одно четырехзначное число и возвращает его.

def count_bulls_and_cows(secret, guess): #Определяем функцию count_bulls_and_cows(secret, guess), которая принимает загаданное число и предположение пользователя.
    """Считает количество быков и коров."""
    bulls = sum(s == g for s, g in zip(secret, guess)) #zip(secret, guess) объединяет цифры загаданного и предполагаемого чисел в пары.
    #sum(s == g for s, g in zip(secret, guess)) подсчитывает количество "быков" (совпадающих цифр на одинаковых позициях).
    cows = sum(min(secret.count(d), guess.count(d)) for d in set(guess)) - bulls #set(guess) создает множество уникальных цифр из предположения.
    # min(secret.count(d), guess.count(d)) считает количество каждой цифры в загаданном и предполагаемом числах, а затем вычитает количество быков, чтобы получить "коров".
    return bulls, cows #Функция возвращает кортеж с количеством быков и коров.

def is_valid_guess(guess): #Определяем функцию is_valid_guess(guess), которая проверяет корректность ввода.
    """Проверяет, что введенное число является четырехзначным и не содержит повторяющихся цифр."""
    return len(guess) == 4 and guess.isdigit() and len(set(guess)) == 4 #len(guess) == 4 проверяет, что введено ровно 4 цифры.
#guess.isdigit() проверяет, что все символы в строке являются цифрами.
#len(set(guess)) == 4 проверяет, что все цифры уникальны.
#Функция возвращает True, если ввод корректен, и False в противном случае.

def display_rules():#Определяем функцию display_rules(), которая выводит правила игры на экран.
    """Выводит правила игры."""
    print("Правила игры 'Быки и коровы':")
    print("1. Я загадаю четырехзначное число, в котором нет повторяющихся цифр.")
    print("2. Ваша задача - угадать это число.")
    print("3. После каждой попытки я сообщу вам, сколько 'быков' и 'коров' вы угадали.")
    print("   - 'Бык' означает, что вы угадали цифру и её позицию.")
    print("   - 'Корова' означает, что вы угадали цифру, но не её позицию.")
    print("4. Вы можете ввести 'стоп', чтобы завершить игру в любой момент.")
    print("5. Удачи!\n")
#Каждая строка print(...) выводит отдельное правило, чтобы игрок понимал, как играть.
def start_game(): #Определяем функцию start_game(), которая запускает игровой процесс.
    """Запускает игру."""
    secret_number = generate_number()#генерирует загаданное число с помощью функции generate_number()
    attempts = 0 #счетчик попыток.
    print("Добро пожаловать в игру 'Быки и коровы'!")

    while True: #Запускаем бесконечный цикл, в котором будет происходить игра.
        guess = input("Введите ваш вариант (четыре разные цифры) или 'стоп' для выхода: ")#запрашивает ввод от пользователя.

        if guess.lower() == 'стоп':
            print("Игра окончена. Спасибо за игру!") #Проверяем, ввел ли пользователь "стоп" (в любом регистре).
            #Если да, выводим сообщение об окончании игры и выходим из цикла с помощью break
            break

        if not is_valid_guess(guess):#Проверяем, корректен ли ввод с помощью функции is_valid_guess().
            #Если ввод некорректен, выводим сообщение об ошибке и продолжаем цикл (переходим к следующей итерации).
            print("Некорректный ввод. Убедитесь, что вы ввели четыре разные цифры.")
            continue

        attempts += 1 #Увеличиваем счетчик попыток на 1.
        bulls, cows = count_bulls_and_cows(secret_number, guess)#Вызываем функцию для подсчета быков и коров.
        print(f"Быки: {bulls}, Коровы: {cows}")# Выводим количество быков и коров на экран.

        if bulls == 4: #Проверяем, угадал ли пользователь число (если количество быков равно 4).
            print(f"Поздравляем! Вы угадали число {secret_number} за {attempts} попыток!")#Если да, выводим сообщение о победе и количестве попыток, после чего выходим из цикла.
            break

def main():#Определяем основную функцию main(), которая управляет началом игры и выводит правила.Определяем основную функцию main(), которая управляет началом игры и выводит правила.
    display_rules()  #Показываем правила игры только один раз
    while True:
        command = input("Введите 'начать' для начала игры или 'выход' для завершения: ") #Запускаем бесконечный цикл, который будет запрашивать команду у пользователя.
        if command.lower() == 'начать':#Проверяем, ввел ли пользователь "начать" (в любом регистре).
            start_game() #Если да, вызываем функцию, чтобы начать игру.
        elif command.lower() == 'выход': #Проверяем, ввел ли пользователь "выход".
            print("Выход из игры. До свидания!")
            break #Если да, выводим сообщение о выходе и выходим из цикла
        else: #Если пользователь ввел что-то другое, выводим сообщение о некорректной команде и предлагаем ввести правильную команду.
            print("Некорректная команда. Пожалуйста, введите 'начать' или 'выход'.")

if __name__ == "__main__": #Проверяем, запущен ли скрипт напрямую (а не импортирован как модуль).
    main()#Если да, вызываем функцию main(), чтобы начать игру.
